/*
问题描述
　　俄罗斯方块是俄罗斯人阿列克谢・帕基特诺夫发明的一款休闲游戏。
　　游戏在一个15行10列的方格图上进行，方格图上的每一个格子可能已经放置了方块，或者没有放置方块。每一轮，都会有一个新的由4个小方块组成的板块从方格图的上方落下，玩家可以操作板块左右移动放到合适的位置，当板块中某一个方块的下边缘与方格图上的方块上边缘重合或者达到下边界时，板块不再移动，如果此时方格图的某一行全放满了方块，则该行被消除并得分。
　　在这个问题中，你需要写一个程序来模拟板块下落，你不需要处理玩家的操作，也不需要处理消行和得分。
　　具体的，给定一个初始的方格图，以及一个板块的形状和它下落的初始位置，你要给出最终的方格图。
输入格式
　　输入的前15行包含初始的方格图，每行包含10个数字，相邻的数字用空格分隔。如果一个数字是0，表示对应的方格中没有方块，如果数字是1，则表示初始的时候有方块。输入保证前4行中的数字都是0。
　　输入的第16至第19行包含新加入的板块的形状，每行包含4个数字，组成了板块图案，同样0表示没方块，1表示有方块。输入保证板块的图案中正好包含4个方块，且4个方块是连在一起的（准确的说，4个方块是四连通的，即给定的板块是俄罗斯方块的标准板块）。
　　第20行包含一个1到7之间的整数，表示板块图案最左边开始的时候是在方格图的哪一列中。注意，这里的板块图案指的是16至19行所输入的板块图案，如果板块图案的最左边一列全是0，则它的左边和实际所表示的板块的左边是不一致的（见样例）
输出格式
　　输出15行，每行10个数字，相邻的数字之间用一个空格分隔，表示板块下落后的方格图。注意，你不需要处理最终的消行。
样例输入
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 1 0 0 0
1 1 1 0 0 0 1 1 1 1
0 0 0 0 1 0 0 0 0 0
0 0 0 0
0 1 1 1
0 0 0 1
0 0 0 0
3
样例输出
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 1 0 0 0
1 1 1 1 1 1 1 1 1 1
0 0 0 0 1 1 0 0 0 0
*/ 

//没什么好说的。。。非常恶心的模拟题qwq 
#include<stdio.h>
#include<algorithm>
using namespace std;
int main(){
	int arr[15][10];
	for(int i=0;i<15;i++)
		for(int j=0;j<10;j++)
			scanf("%d",&arr[i][j]);
	int next[4][4];
	for(int i=0;i<4;i++)
		for(int j=0;j<4;j++)
			scanf("%d",&next[i][j]);
	int d;
	scanf("%d",&d);
	d-=1;//d代表与最左边的偏移量 
	for(int i=0;i<4;i++)
		for(int j=0;j<4;j++)
			arr[i][j+d]=next[i][j];
	int mark=15;
	int m[4];
	for(int j=d;j<d+4;j++){//掉下来新方块的四列，对每列进行处理 	循环变量j 
		int temp=0;//表示这一列往下掉了几行 
		int flag=false;
		for(int k=3;k>=0;k--){//循环变量k 
			if(arr[k][j]==0);
			else{
				for(int i=k;i<14;i++){//循环变量i，表示从上往下第几行(从0开始计数) 
					//if(arr[i][j]==1){
						if(arr[i+1][j]==0){
							//arr[i][j]=0;
							//arr[i+1][j]=1;
							temp++;//每掉一行+1 
							printf("temp=%d\n",temp);
						}
						else{//下一行不是0，有挡着的 
							flag=true;
							m[j-d]=temp;
							if(temp<mark)mark=temp;
							break;//跳出i循环，到k循环 
						}
					//}
				}
				if(flag)break;
			}
			
			
		}
	}
	printf("mark=%d\n",d);
	for(int j=d;j<d+4;j++){//掉下来新方块的四列，对每列进行处理 	循环变量j 
		for(int k=3;k>=0;k--){
			if(arr[k][j]==0)continue;
			else{
				arr[k+mark][j]=arr[k][j];
				arr[k][j]=0;
			}
						
		}
	}
	for(int i=0;i<15;i++){
		for(int j=0;j<10;j++)
			printf("%d ",arr[i][j]);
		printf("\n");
	}
		
	return 0;
}
